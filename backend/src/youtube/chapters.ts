class YoutubeChaptersGetter {
	private readonly youtube: string
	constructor(youtube = 'https://youtube.com') {
		this.youtube = youtube
	}

	private async getVideo(videoId: string): Promise<string> {
		try {
			const response = await fetch(`${this.youtube}/watch?v=${videoId}`)
			return await response.text()
		} catch (error) {
			console.error('getVideo err: ', error)
			return ''
		}
	}

	private getScript(html: string): string {
		try {
			const scriptTagStart = 'var ytInitialData = '
			const scriptTagEnd = '</script>'

			const startIndex = html.indexOf(scriptTagStart)
			if (startIndex === -1) return '{}'

			const endIndex = html.indexOf(scriptTagEnd, startIndex)
			if (endIndex === -1) return '{}'

			const ytInitialDataString = html
				.slice(startIndex + scriptTagStart.length, endIndex)
				.trim()
			if (ytInitialDataString.endsWith(';')) {
				return ytInitialDataString.slice(0, -1)
			}

			return ytInitialDataString
		} catch (error) {
			console.error('getScript err: ', error)
			return '{}'
		}
	}

	async getChapter(videoId: string) {
		try {
			const videoHtml = await this.getVideo(videoId)
			const scriptData = this.getScript(videoHtml)
			const ytInitialDataJson = JSON.parse(scriptData)
			
			const chapterData =
				ytInitialDataJson?.engagementPanels?.[2]?.[
					'engagementPanelSectionListRenderer'
				]?.['content']?.['macroMarkersListRenderer']?.['contents'] || []
			
			if (!chapterData.length) return []
			
			const areAutoGenerated =
				'macroMarkersInfoItemRenderer' in chapterData[0]
			const filteredContents = chapterData.slice(areAutoGenerated ? 1 : 0)

			const chapters = filteredContents.map((chapterItem: any) => {
				const chapter = chapterItem.macroMarkersListItemRenderer
				const timeStr = chapter.timeDescription.simpleText
				const url =
					this.youtube +
					chapter.onTap.commandMetadata.webCommandMetadata.url

				return {
					title: chapter.title.simpleText,
					time: timeStr,
					url,
				}
			})
			return chapters
		} catch (error) {
			console.error('getChapter err: ', error)
			return []
		}
	}
}

export default new YoutubeChaptersGetter()